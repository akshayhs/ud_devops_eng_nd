Description:
  CloudFormation template that deploys infrastructure for a highly-scalable web application. 

Parameters:
  EnvironmentName: 
    Description: Name for the environment 
    Type: String
    Default: "CFAppUdacity" 
  VpcCIDR:
    Description: The IP range/CIDR notation
    Type: String
    Default: "10.0.0.0/16"
  PublicSubnet1CIDR:
    Description: The IP range for public subnet 1
    Type: String 
    Default: "10.0.1.0/24"
  PrivateSubnet1CIDR:
    Description: The IP range for private subnet 1
    Type: String 
    Default: "10.0.2.0/24"
  PublicSubnet2CIDR:
    Description: The IP range for public subnet 2
    Type: String 
    Default: "10.0.3.0/24"
  PrivateSubnet2CIDR:
    Description: The IP range for private subnet 2
    Type: String 
    Default: "10.0.4.0/24"
  EC2InstanceAMI:
    Description: The Machine image ID generated by Amazon
    Type: String
    Default: "ami-02b5fbc2cb28b77b8"
  EC2InstanceType:
    Description: The instance hardware specifications for deployment 
    Type: String 
    Default: "t3.medium"

Resources:
  VPC:
    Type: AWS::EC2::VPC 
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true 
      Tags:
        - Key: Name 
          Value: !Sub VPC for ${EnvironmentName}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub Internet Gateway for ${EnvironmentName}
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC 
      Tags:
        - Key: Name
          Value: !Sub Public subnet 1 for ${EnvironmentName}
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      VpcId: !Ref VPC 
      Tags:
        - Key: Name
          Value: !Sub Private subnet 1 for ${EnvironmentName}
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Public subnet 2 for ${EnvironmentName}
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Private subnet 2 for ${EnvironmentName}
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:       
      Domain: !Ref VPC
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:       
      Domain: !Ref VPC 
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name 
          Value: !Sub ${EnvironmentName} NAT gateway for public subnet 1
  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId 
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name 
          Value: !Sub ${EnvironmentName} NAT gateway for public subnet 2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable    
    Properties:
      VpcId: !Ref VPC 
      Tags:
      - Key: Name 
        Value: !Sub Public route table for ${EnvironmentName}
  DefaultPublicRoute:
    Type: AWS::EC2::Route 
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC 
      Tags:
        - Key: Name 
          Value: !Sub Private route table for ${EnvironmentName}
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable1
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC 
      Tags: 
        - Key: Name 
          Value: !Sub Private route table for ${EnvironmentName}
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route 
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable2
      NatGatewayId: !Ref NatGateway2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
# Infrastructure resources 
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group for the load balancer
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp  
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
      Tags:
        - Key: Name 
          Value: !Sub Load balancer security group for ${EnvironmentName}
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for our application
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp 
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp 
          FromPort: 80
          ToPort: 80
      SecurityGroupEgress:
        - FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp 
      Tags:
        - Key: Name
          Value: !Sub Web application security group for ${EnvironmentName}
  WebAppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10
      ImageId: !Ref EC2InstanceAMI
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref AppInstanceProfile
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip                           
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup 
    Properties:      
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref WebAppLaunchConfiguration
      MinSize: "4"
      MaxSize: "6"      
      MetricsCollection:
        - Granularity: 1Minute
          Metrics: 
            - GroupMinSize
            - GroupMaxSize
            - GroupTotalInstances
            - GroupInServiceInstances
            - GroupTotalInstances
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub Load balancer for ${EnvironmentName}
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type: "forward"
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP
  LoadbalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      ListenerArn: !Ref LoadBalancerListener
      Conditions:
        - Field: path-pattern
          Values: ["/"]      
      Priority: 1
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true 
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Name: !Ref EnvironmentName
      Port: 80
      Protocol: HTTP      
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: !Sub LB target group for ${EnvironmentName}
  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/" 
      InstanceProfileName: !Ref EnvironmentName
      Roles:
        - !Ref S3BucketRole             
  S3BucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Role for our web application       
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: "*"
          PolicyName: "S3BucketAccess"

Outputs:
  VPC:
    Description: Virtual Private Cloud created for the application
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPC
  PublicSubnets:
    Description: Public subnets created for the application
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export: 
      Name: !Sub ${EnvironmentName}-PUBLIC-NETS
  PrivateSubnets:
    Description: Private subnets created for the application
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub ${EnvironmentName}-PRIV-NETS  
  LoadBalancerDNS:
    Description: DNS for the load balancer created 
    Value: !Join ["", ["http://", !GetAtt WebAppLoadBalancer.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-DNS